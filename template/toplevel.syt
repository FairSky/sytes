{ ; -*- lisp -*-
(eval-now

 ((lambda (qq)
    (&set! qq (lambda (x)
                (if (cons? x)
                    (if (eq 'unquote (car x))
                        (cadr x)
                        (if (eq 'quasiquote (car x))
                            (qq (qq (cadr x)))
                            (if (cons? (car x))
                                (if (eq 'splice (caar x))
                                    (list 'append (cadar x) (qq (cdr x)))
                                    (list 'cons (qq (car x)) (qq (cdr x))))
                                (list 'cons (qq (car x)) (qq (cdr x))))))
                    (list 'quote x))))
    (&defmacro! quasiquote (thing) (qq thing))) nil)

 (&defmacro! defmacro (name args . body)
             `(eval-now (&defmacro! ,name ,args ,@body)))

 (defmacro when (condition . body)
   `(if ,condition (progn ,@body)))

 (defmacro unless (pred . body)
   `(if ,pred nil (progn ,@body)))

 (defmacro prog1 (exp . body)
   (let ((ret (gensym)))
     `(let ((,ret ,exp))
        ,@body
        ,ret)))

 (defmacro prog2 (exp1 exp2 . body)
   `(progn
      ,exp1
      (prog1 ,exp2 ,@body)))

 (defmacro or exps
   (when exps
     (let ((x (gensym "OR")))
       `(let ((,x ,(car exps)))
          (if ,x ,x (or ,@(cdr exps)))))))

 (defmacro and exprs
   (if exprs
       (let ((x (gensym "AND")))
         `(let ((,x ,(car exprs)))
            (when ,x
              ,(if (cdr exprs) `(and ,@(cdr exprs)) x))))
       t))

 (defmacro cond cases
   (if cases
       `(if ,(caar cases)
            (progn ,@(cdar cases))
            (cond ,@(cdr cases)))))

 (defmacro labels (defs . body)
   `((lambda ()
       ,@(mapcar (lambda (x)
                   (let ((name (car x))
                         (args (cadr x))
                         (body (cddr x)))
                     `(define (,name ,@args) ,@body)))
                 defs)
       ,@body)))

 (defmacro case (expr . cases)
   (let ((vexpr (gensym "CASE")))
     `(let ((,vexpr ,expr))
        ,(labels ((recur (cases)
                    (when cases
                      (if (and (listp (caar cases)) (caar cases))
                          `(if (member ,vexpr ',(caar cases))
                               (progn ,@(cdar cases))
                               ,(recur (cdr cases)))
                          (if (and (not (cdr cases))
                                   (member (caar cases) '(otherwise t)))
                              `(progn ,@(cdar cases))
                              `(if (eq ,vexpr ',(caar cases))
                                   (progn ,@(cdar cases))
                                   ,(recur (cdr cases))))))))
           (recur cases)))))

 (defmacro defglobal (name value)
   `(&defglobal! ',name ,value))

 (defmacro defun (name args . body)
   `(defglobal ,name (lambda ,args ,@body)))

 (defmacro define (x . val)
   (if (cons? x)
       `(&def! ,(car x) (lambda ,(cdr x) ,@val))
       `(&def! ,x ,(car val))))

 (defmacro let (defs . body)
   `((lambda ,(mapcar (lambda (x)
                        (if (cons? x) (car x) x)) defs)
       ,@body)
     ,@(mapcar (lambda (x)
                 (if (cons? x) (cadr x) nil)) defs)))

 (defglobal %set!-setters (make-hash))

 (defmacro set! (thing . val)
   (if (symbol? thing)
       `(&set! ,thing ,(car val))
       ((get-hash %set!-setters (car thing)) (cdr thing) val)))

 (defmacro define-setter (symbol args values . body)
   (let ((a1 (gensym))
         (a2 (gensym)))
     `(set-hash %set!-setters
                ',symbol
                (lambda (,a1 ,a2)
                  (apply (lambda ,args
                           (apply (lambda ,values
                                    ,@body)
                                  ,a2))
                         ,a1)))))

 (define-setter car (cell) (value) `(rplaca ,cell ,value))
 (define-setter cdr (cell) (value) `(rplacd ,cell ,value))
 (define-setter &dot-lookup (main . path) (value)
   `(%dot-set ,main ,value ,@path))

 (defmacro inc! (x . delta)
   (let ((val (gensym)))
     `(let ((,val ,x))
        (set! ,x ,(if delta
                      `(+ ,(car delta) ,val)
                      `(1+ ,val))))))

 (defmacro dec! (x . delta)
   (let ((val (gensym)))
     `(let ((,val ,x))
        (set! ,x ,(if delta
                      `(- ,(car delta) ,val)
                      `(1- ,val))))))

 (defmacro foreach (name lst . body)
   `(strcat (mapcar (lambda (,name)
                      ,@body) ,lst)))

 (defmacro foreach* (name lst . body)
   (let ((vrec (gensym))
         (vlst (gensym)))
     `((lambda ()
         (define (&break)
             (throw &break))
         (define (&continue)
             (throw &continue))
         (define (,vrec ,vlst &index &first)
             (define &last (not (cdr ,vlst)))
           (if ,vlst
               (progn
                 (catch &continue
                   (print ((lambda (,name)
                             ,@body)
                           (car ,vlst))))
                 (,vrec (cdr ,vlst) (1+ &index) nil))))
         (capture-output (lambda ()
                           (catch &break
                             (,vrec ,lst 0 t))))))))

 )}
